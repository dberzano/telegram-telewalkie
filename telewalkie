#!/usr/bin/env python3
from __future__ import print_function
from argparse import ArgumentParser
from requests import get, post
from requests.exceptions import RequestException
from pathlib import Path
from time import sleep, time
import os
import subprocess
import json
import sys
import logging

# Run command with Bash as shell. Return exitcode, print command output on error.
def runcmd(cmd):
  popen = subprocess.Popen([ "bash", "-c", cmd ],
                         shell=False, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
  out = popen.communicate()[0]
  if isinstance(out, bytes):
    out = out.decode('utf-8')
  log.debug("play command returned %d" % popen.returncode)
  if popen.returncode != 0:
    for line in out.split("\n"):
      log.error("%d: %s" % (popen.returncode, line))
  return popen.returncode

# Telegram API. Takes method as input. Token is taken from the globals.
def api(method, params=None):
  try:
    if params is None:
      params = {}
    url = "https://api.telegram.org/bot{token}/{method}".format(token=token, method=method)
    return get(url, timeout=params.get("timeout", 0)+10, params=params).json()
  except (RequestException,ValueError) as e:
    return { "error": str(e) }

# Check if a dictionary has the given keys.
def dictcheck(d, expected):
  if not isinstance(d, dict) or not isinstance(expected, dict):
    return False
  for k,v in expected.items():
    if isinstance(v, dict):
      if not k in d or not isinstance(d[k], dict) or not dictcheck(d[k], v):
        return False
    elif (v and not k in d) or (not v and k in d):
      return False
  return True

def loop():
  offset = 0
  start = 0
  end = 0
  pause = 0
  retry = 0
  while True:
    start = time()
    log.debug("getting updates with offset %d" % offset)
    upd = api("getUpdates", params={"offset"         : offset,
                                    "timeout"        : 60,
                                    "allowed_updates": "[]"})
    end = time()
    log.debug("done after %.2f s" % (end-start))

    if "error" in upd:
      log.error("got %s" % upd["error"])
    elif "result" in upd and isinstance(upd["result"], list):
      if len(upd["result"]):
        log.info("messages: %d" % len(upd["result"]))
      for msg in upd["result"]:
        # Message structure should be the following
        # (See also https://core.telegram.org/bots/api#user)
        sanity = dictcheck(msg, { "message": {
                                    "voice": {
                                      "file_id"    : True
                                    },
                                    "from": {
                                      "is_bot"     : True,
                                      "first_name" : True,  # last_name is optional
                                      "id"         : True
                                    }
                                  }
                                })
        if not sanity:
          log.debug("not interesting: %s" % msg)
          offset = msg.get("update_id", offset-1)+1  # next please
        elif not msg["message"]["from"]["id"] in authorized_ids:
          log.debug("unauthorized: %d (%s %s, %s)" %
                    (msg["message"]["from"]["id"],
                     msg["message"]["from"]["first_name"],
                     msg["message"]["from"].get("last_name", "*"),
                     "bot" if msg["message"]["from"]["is_bot"] else "human"))
          offset = msg.get("update_id", offset-1)+1  # next please
        else:
          try:
            fileinfo = api("getFile", params={"file_id": msg["message"]["voice"]["file_id"]})
          except (TypeError,KeyError):
            log.error("cannot get voice file this time")
          else:
            log.info("playing message from %d (%s %s, %s)" %
                     (msg["message"]["from"]["id"],
                      msg["message"]["from"]["first_name"],
                      msg["message"]["from"].get("last_name", "*"),
                      "bot" if msg["message"]["from"]["is_bot"] else "human"))
            file_url = f"https://api.telegram.org/file/bot{token}/{fileinfo['result']['file_path']}"
            # Read the file in memory, and play it
            log.debug(f"retrieving audio from URL: {file_url}")
            areq = get(file_url)
            areq.raise_for_status()
            if alsa_device is not None:
                env_override = dict(os.environ)
                env_override["AUDIODEV"] = alsa_device
                env_override["SDL_AUDIODRIVER"] = "alsa"
                log.debug(f"using ALSA audio device {alsa_device} as per --alsa-device")
            else:
                env_override = None
            try:
                with subprocess.Popen(["ffplay", "-autoexit", "-nodisp", "-loglevel", "panic", "-"],
                                      stdin=subprocess.PIPE,
                                      stdout=subprocess.PIPE,
                                      stderr=subprocess.STDOUT,
                                      env=env_override) as p:
                    p.stdin.write(areq.content)
                    p.stdin.close()
                    log.debug("ffplay output: " + p.stdout.read().decode('utf-8').rstrip())
            except FileNotFoundError:
                log.error("player `ffplay` not found")
                rc = 1
            else:
                rc = p.returncode
            if rc != 0:
              retry = retry + 1
              log.error("error executing play command: retrying %d more times" % (3-retry))
            if rc == 0 or retry == 3:
              offset = msg.get("update_id", offset-1)+1  # next please
              retry = 0

    else:
      log.error("got unexpected result: %s" % upd)
    if end-start < 5.:
      pause = 5.-(end-start)
      log.debug("dethrottling connection: pause %.2f s" % pause)
      sleep(pause)

if __name__ == "__main__":
  parser = ArgumentParser()
  parser.add_argument("--debug", dest="debug", default=False, action="store_true",
                      help="see debug messages")
  parser.add_argument("--token", dest="token", required=True,
                      help="Telegram bot token")
  parser.add_argument("--authorized-ids", dest="authorized_ids", required=True, type=int, nargs="+",
                      help="authorized user IDs")
  parser.add_argument("--alsa-device", dest="alsa_device", required=False, default=None,
                      help="ALSA audio device")
  parser.add_argument("--pidfile", dest="pidfile", required=False, default=None,
                      help="where to store the PID")
  parser.add_argument("--logfile", dest="logfile", required=False, default=None,
                      help="where to store the log")
  args = parser.parse_args()

  # Set up logging
  log = logging.getLogger("root")
  log.setLevel(logging.DEBUG if args.debug else logging.INFO)
  fmt = logging.Formatter("[%(asctime)s] %(levelname)s: %(message)s")
  ch = logging.StreamHandler()
  ch.setFormatter(fmt)
  log.addHandler(ch)
  if args.logfile is not None:
    fh = logging.FileHandler(args.logfile, mode="w")
    fh.setFormatter(fmt)
    log.addHandler(fh)

  # Check if another instance is running
  try:
    pid = int(Path(args.pidfile).read_text().strip())
    os.kill(pid, 0)
    log.info(f"instance of telewalkie running with PID {pid} was found: exiting")
    sys.exit(0)
  except Exception:
    if args.pidfile is not None:
      log.info(f"no instance of telewalkie was found: continuing - writing PID to {args.pidfile}")
      Path(args.pidfile).write_text(str(os.getpid()))
    else:
      log.warning("no --pidfile was provided, no protection against multiple instances")

  token = args.token
  authorized_ids = args.authorized_ids
  alsa_device = args.alsa_device

  loop()
